using SpeProcessor;

namespace SpeProcessor_Tester
{
    public class PeakHanderTests
    {
        private int[] counts = new int[]
            {
                0,0,0,0,0,365,914,1939,2269,2486,2508,2490,2337,2299,2515,2551,2939,3176,3678,4264,4958,5642,6136,6899,7358,8080,8386,8694,9086,9560,9447,9494,9570,9392,9288,9297,9372,9093,8972,8858,8657,8489,8402,8252,7950,7861,7628,7545,7254,6999,6945,6738,6582,6478,6300,6018,5832,5706,5587,5331,5418,5203,5074,5022,4824,4777,4635,4574,4300,4273,4200,4197,4182,4094,3885,3954,3924,3680,3822,3679,3656,3486,3377,3185,3124,2969,2854,2718,2646,2538,2501,2364,2382,2348,2295,2310,2185,2211,2138,2061,2062,1948,1937,1935,1859,1834,1755,1698,1671,1695,1713,1647,1606,1648,1680,1587,1591,1639,1513,1437,1507,1411,1269,1244,1140,1096,1048,1058,1073,998,948,980,960,928,871,898,876,819,790,795,834,838,838,814,797,769,737,777,775,764,703,722,745,722,750,718,711,717,648,697,627,662,653,647,678,620,674,690,617,636,610,626,592,591,596,607,545,570,573,576,580,552,566,552,581,574,560,628,619,630,614,664,701,640,640,629,665,595,625,627,588,590,616,584,566,542,495,486,468,477,454,420,403,367,349,337,341,324,339,315,347,334,302,333,320,350,321,333,337,303,328,304,291,329,324,298,334,299,312,324,332,323,313,308,290,301,304,309,293,291,312,296,276,292,242,287,277,277,293,292,288,286,262,266,252,277,283,245,246,265,227,261,263,236,248,257,242,222,256,247,243,256,205,232,244,236,235,244,231,266,302,258,283,250,264,265,255,228,261,230,244,249,245,257,258,257,235,253,228,245,263,238,251,223,200,249,257,224,239,214,214,223,221,210,188,222,177,180,207,145,190,156,169,158,173,171,177,163,174,151,156,170,171,164,157,171,155,154,181,193,195,168,179,171,183,207,180,213,187,186,155,196,219,191,177,184,165,210,177,195,183,186,171,181,181,178,179,195,176,154,176,139,166,153,167,169,151,138,154,147,132,148,108,138,134,150,128,142,142,122,145,125,113,140,97,98,127,115,106,128,103,99,110,120,102,109,94,96,89,91,92,86,91,85,92,93,94,91,99,78,79,79,97,98,85,80,87,82,92,78,94,85,99,72,99,104,105,108,115,98,114,117,125,130,127,130,130,154,151,149,180,173,184,178,172,209,222,232,230,244,248,268,243,288,268,285,302,246,275,278,241,277,253,250,236,218,197,201,188,159,129,138,125,127,110,110,109,80,77,83,75,64,70,57,52,71,33,39,51,43,46,38,41,43,37,31,36,29,46,30,34,34,34,39,21,20,33,36,42,41,32,31,37,28,33,40,34,40,32,31,33,31,32,32,34,32,29,38,35,36,36,31,33,28,33,31,16,40,45,36,30,36,37,40,44,43,48,35,47,35,40,33,53,58,38,48,41,34,42,46,49,46,46,36,38,40,43,25,27,32,37,28,40,35,37,24,25,28,22,23,27,28,26,19,26,19,24,23,22,17,24,22,25,20,27,21,14,21,14,18,25,24,17,19,18,18,12,17,24,15,20,13,11,17,12,14,15,12,13,18,20,24,23,12,24,11,17,17,12,13,14,14,10,17,15,18,14,18,19,20,24,17,23,14,20,15,18,15,18,29,13,16,13,22,17,11,18,16,26,19,20,28,20,14,17,15,18,23,25,15,23,22,19,26,34,20,18,19,22,36,25,20,8,24,26,16,19,19,21,20,28,31,26,19,19,24,28,20,26,20,27,24,16,25,19,14,20,20,12,14,23,23,18,17,19,14,16,22,21,12,21,21,19,20,18,15,14,19,13,17,16,17,8,23,16,13,16,13,19,17,12,13,6,12,11,11,12,13,15,17,16,14,5,9,5,16,18,10,8,8,6,15,7,5,15,5,15,10,10,12,4,8,9,7,11,9,11,12,11,7,11,4,9,7,5,8,7,9,11,9,6,4,7,9,11,14,8,7,5,18,6,6,12,6,13,7,6,15,7,9,10,14,13,8,9,13,20,11,18,16,23,12,15,9,21,28,25,17,25,23,18,16,23,26,25,22,22,29,20,29,26,27,18,19,24,27,19,21,18,20,20,14,23,14,14,13,16,15,11,5,5,8,5,9,6,2,2,3,7,4,2,5,5,3,6,3,2,2,2,2,1,0,1,1,3,0,2,1,0,0,3,1,1,4,0,2,0,0,0,0,1,1,2,3,2,2,2,1,0,2,1,1,2,0,3,1,1,3,0,0,1,0,0,3,1,2,3,0,0,1,0,2,1,1,0,1,3,0,2,1,1,1,0,0,0,2,0,2,2,1,1,1,2,0,1,1,1,0,1,0,3,2,2,0,0,2,2,1,1,0,2,1,1,2,0,1,0,2,1,2,0,1,2,1,0,2,0,0,1,2,4,0,1,1,2,0,1,1,1,1,3,2,1,0
            };
        PeakRangeData peakRangeRa226 = new PeakRangeData() { StartChannelIndex = 181, EndChannelIndex = 218, AveragingWindowSize = 5, RangeName = "Ra-226" };
        PeakRangeData peakRangeK40 = new PeakRangeData() { StartChannelIndex = 446, EndChannelIndex = 511, AveragingWindowSize = 5, RangeName = "K-40" };
        PeakRangeData peakRangeTh232 = new PeakRangeData() { StartChannelIndex = 825, EndChannelIndex = 898, AveragingWindowSize = 5, RangeName = "Ra-226" };
        PeakRangeData peakRangeRa226_2 = new PeakRangeData() { StartChannelIndex = 550, EndChannelIndex = 616, AveragingWindowSize = 5, RangeName = "Ra-226" };

        [Fact]
        public void AveragingTest()
        {
            var meanLeft = PeakHandler.AverageInRange(counts, peakRangeRa226.StartChannelIndex - peakRangeRa226.AveragingWindowSize + 1, peakRangeRa226.StartChannelIndex);
            var meanRight= PeakHandler.AverageInRange(counts, peakRangeRa226.EndChannelIndex, peakRangeRa226.EndChannelIndex + peakRangeRa226.AveragingWindowSize - 1);
            Assert.Equal(570.2f, meanLeft, 0.1);
            Assert.Equal(327.4f, meanRight, 0.1);
        }

        [Fact]
        public void Ra226SlopeTest()
        {
            var slope = PeakHandler.GetBaseSlope(counts, peakRangeRa226);
            Assert.Equal(-6.744f, slope, 0.03);
        }
        [Fact]
        public void K40SlopeTest()
        {
            var slope = PeakHandler.GetBaseSlope(counts, peakRangeK40);
            Assert.Equal(-0.9031f, slope, 0.03);
        }
        [Fact]
        public void Th232SlopeTest()
        {
            var slope = PeakHandler.GetBaseSlope(counts, peakRangeTh232);
            Assert.Equal(-0.1056f, slope, 0.03);
        }
        [Fact]
        public void Ra226_2SlopeTest()
        {
            var slope = PeakHandler.GetBaseSlope(counts, peakRangeRa226_2);
            Assert.Equal(-0.25231f, slope, 0.03);
        }

        private void CountRate(PeakRangeData range, float expected)
        {
            var peakWithoutBase = PeakHandler.ClearFromBase(counts, range);
            var countRate = PeakHandler.GetCountRate(PeakHandler.GetPeakArea(peakWithoutBase, range), 3600);
            Assert.Equal(expected, countRate, 0.1);
        }

        [Fact]
        public void CountRateTests()
        {
            CountRate(peakRangeRa226, 0.96711f);
            CountRate(peakRangeK40, 1.6748f);
            CountRate(peakRangeTh232, 0.1899f);
            CountRate(peakRangeRa226_2, 0.1253f);
        }
    }
}